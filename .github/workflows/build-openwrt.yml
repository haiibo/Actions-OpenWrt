name: build-openwrt

on:
  # schedule: [ cron: 0 2 */7 * * ]
  # watch:
  #   types: started
  workflow_dispatch:
    inputs:
      source:
        description: "选择编译源码仓库"
        required: true
        default: "immortalwrt"
        type: choice
        options: [lede, immortalwrt]

      branch:
        description: '选择源码仓库分支'
        required: true
        default: 'openwrt-23.05'
        type: choice
        options: [master, openwrt-23.05, openwrt-21.02, openwrt-18.06, openwrt-18.06-k5.4]

      target:
        description: '选择要编译的机型'
        required: true
        default: 'x86_64'
        type: choice
        options: [x86_64, r1-plus-lts, r2c, r2s, r4s, newifi-d2, asus_rt-n16, phicomm_k2p, armvirt-64-default]

      ip:
        description: '设置web登录IP'
        required: false
        default: '192.168.2.1'

      partsize:
        description: '设置rootfs大小'
        required: false
        default: '800'

      free_disk:
        description: '释放磁盘空间'
        required: false
        default: false
        type: boolean

env:
  UPLOAD_BIN_DIR: false
  UPLOAD_ARTIFACT: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    name: ${{ github.event.inputs.source }}-${{ github.event.inputs.branch }}-${{ github.event.inputs.target }}

    permissions:
      contents: write

    env:
      SOURCE_REPO: ${{ github.event.inputs.source }}
      REPO_BRANCH: ${{ github.event.inputs.branch }}
      TARGET_DEVICE: ${{ github.event.inputs.target }}
      DEFAULT_IP: ${{ github.event.inputs.ip }}
      PART_SIZE: ${{ github.event.inputs.partsize }}

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "==========================CPU信息=========================="
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU线程数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "==========================内存信息=========================="
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "==========================硬盘信息=========================="
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Free Disk Space
      if: github.event.inputs.free_disk == 'true'
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        (docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo swapoff -a && sudo rm -f /swapfile /mnt/swapfile
        sudo -E apt-get -y update
        sudo -E apt-get -y install clang rename $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean) &
        sudo -E timedatectl set-timezone "$TZ"

    - name: Create Combine Disks
      run: |
        MNT_SIZE=$((($(df --block-size=1024 --output=avail /mnt | tail -1) - 1024*1024*1) * 1024))
        sudo fallocate -l $MNT_SIZE /mnt/mnt.img
        MNT_NAME=$(sudo losetup -Pf --show /mnt/mnt.img)
        sudo pvcreate -f $MNT_NAME
        ROOT_SIZE=$((($(df --block-size=1024 --output=avail / | tail -1) - 1024*1024*4) * 1024))
        sudo fallocate -l $ROOT_SIZE /root.img
        ROOT_NAME=$(sudo losetup -Pf --show /root.img)
        sudo pvcreate -f $ROOT_NAME
        sudo vgcreate actions $MNT_NAME $ROOT_NAME
        sudo lvcreate -n disk -l 100%FREE actions
        LV_NAME=$(sudo lvscan | awk -F "'" '{print $2}')
        sudo mkfs.btrfs -L combinedisk $LV_NAME
        sudo mount -o compress=zstd $LV_NAME $GITHUB_WORKSPACE
        sudo chown -R runner:runner $GITHUB_WORKSPACE && df -hT

    - name: Checkout Repo
      uses: actions/checkout@v4.2.0

    - name: Load Compile Script
      run: chmod +x $SOURCE_REPO.sh && ./$SOURCE_REPO.sh

    - name: Compile Toolchain
      id: toolchain
      if: env.REBUILD_TOOLCHAIN == 'true' && !cancelled()
      run: |
        cd $OPENWRT_PATH
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        $GITHUB_WORKSPACE/$SOURCE_REPO.sh
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        RANDOM=$$$(date +%s); rand=$[$RANDOM % ${#Emoji[@]}]
        echo "EMOJI=${Emoji[$rand]}" >>$GITHUB_ENV

    - name: Delete Old Toolchain
      if: steps.toolchain.conclusion == 'success' && !cancelled()
      uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: toolchain-cache
        assets: '${{ env.SOURCE_REPO }}-${{ env.LITE_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.*'
        fail-if-no-assets: false
        fail-if-no-release: false

    - name: Upload Toolchain To Release
      if: steps.toolchain.conclusion == 'success' && !cancelled()
      uses: softprops/action-gh-release@v2.0.8
      with:
        name: ${{ env.EMOJI }} toolchain-cache ${{ env.EMOJI }}
        tag_name: toolchain-cache
        token: ${{ secrets.GITHUB_TOKEN }}
        files: output/*
        body: OpenWrt 工具链缓存

    - name: Download DL Package
      run: |
        cd $OPENWRT_PATH
        make package/download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      id: compile
      timeout-minutes: 1440
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "FILE_DATE=$(date +%Y-%m-%d)" >>$GITHUB_ENV

    - name: Upload Bin Directory
      if: steps.compile.conclusion == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      uses: actions/upload-artifact@v4.4.0
      with:
        name: ${{ env.SOURCE_REPO }}-${{ env.LITE_BRANCH }}-${{ env.TARGET_DEVICE }}-bin-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Organize Files
      id: organize
      if: steps.compile.conclusion == 'success' && !cancelled()
      run: |
        df -hT
        cd $OPENWRT_PATH
        echo "======================================"
        du -h --max-depth=1 ./bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./staging_dir
        du -h --max-depth=1 ./ --exclude=bin --exclude=build_dir --exclude=staging_dir --exclude=bin
        echo "======================================"
        ls bin/targets/*/*
        echo "======================================"
        cat bin/targets/*/*/config.buildinfo
        bash organize.sh

    - name: Upload Firmware To Artifact
      if: steps.organize.conclusion == 'success' && env.UPLOAD_ARTIFACT == 'true' && !cancelled()
      uses: haiibo/upload-artifact-as-is@master
      with:
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release
      if: steps.organize.conclusion == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      uses: softprops/action-gh-release@v2.0.8
      with:
        name: ${{ env.EMOJI }} ${{ env.FILE_DATE }} ${{ env.SOURCE_REPO }}-${{ env.TARGET_DEVICE }} ${{ env.EMOJI }}
        tag_name: ${{ env.FILE_DATE }}-${{ env.SOURCE_REPO }}-${{ env.TARGET_DEVICE }}
        token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is ${{ env.SOURCE_REPO }} firmware for ${{ env.TARGET_DEVICE }}**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL_VERSION }}
          - 🌐 默认地址: ${{ env.DEFAULT_IP }}
          - 🔑 默认密码: password
